// Generated from src/parser/grammars/csharp/CSharpParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CSharpParserLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly T__23 = 24;
	public static readonly T__24 = 25;
	public static readonly T__25 = 26;
	public static readonly T__26 = 27;
	public static readonly T__27 = 28;
	public static readonly T__28 = 29;
	public static readonly T__29 = 30;
	public static readonly T__30 = 31;
	public static readonly T__31 = 32;
	public static readonly T__32 = 33;
	public static readonly T__33 = 34;
	public static readonly T__34 = 35;
	public static readonly T__35 = 36;
	public static readonly T__36 = 37;
	public static readonly T__37 = 38;
	public static readonly T__38 = 39;
	public static readonly T__39 = 40;
	public static readonly T__40 = 41;
	public static readonly T__41 = 42;
	public static readonly T__42 = 43;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'.'", "'?'", "'*'", "'('", "','", "')'", "'<'", "'>'", "':'", 
		"'??='", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<='", "'??'", "'|'", "'^'", "'&'", "'<='", "'>='", "'<<'", 
		"'+'", "'-'", "'/'", "'%'", "'switch'", "'{'", "'}'", "'~'", "'++'", "'--'", 
		"'!'", "'->'", "'['", "']'", "'::'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CSharpParserLexer._LITERAL_NAMES, CSharpParserLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CSharpParserLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CSharpParserLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CSharpParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return CSharpParserLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CSharpParserLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CSharpParserLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CSharpParserLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02-\xC8\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03\"\x03" +
		"\"\x03#\x03#\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03(" +
		"\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x02\x02\x02-\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02" +
		"\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17" +
		"-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F" +
		"=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S" +
		"\x02+U\x02,W\x02-\x03\x02\x02\x02\xC7\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02" +
		"?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02" +
		"\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02" +
		"\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03" +
		"\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x03Y\x03\x02\x02" +
		"\x02\x05[\x03\x02\x02\x02\x07]\x03\x02\x02\x02\t_\x03\x02\x02\x02\va\x03" +
		"\x02\x02\x02\rc\x03\x02\x02\x02\x0Fe\x03\x02\x02\x02\x11g\x03\x02\x02" +
		"\x02\x13i\x03\x02\x02\x02\x15k\x03\x02\x02\x02\x17o\x03\x02\x02\x02\x19" +
		"q\x03\x02\x02\x02\x1Bt\x03\x02\x02\x02\x1Dw\x03\x02\x02\x02\x1Fz\x03\x02" +
		"\x02\x02!}\x03\x02\x02\x02#\x80\x03\x02\x02\x02%\x83\x03\x02\x02\x02\'" +
		"\x86\x03\x02\x02\x02)\x89\x03\x02\x02\x02+\x8D\x03\x02\x02\x02-\x90\x03" +
		"\x02\x02\x02/\x92\x03\x02\x02\x021\x94\x03\x02\x02\x023\x96\x03\x02\x02" +
		"\x025\x99\x03\x02\x02\x027\x9C\x03\x02\x02\x029\x9F\x03\x02\x02\x02;\xA1" +
		"\x03\x02\x02\x02=\xA3\x03\x02\x02\x02?\xA5\x03\x02\x02\x02A\xA7\x03\x02" +
		"\x02\x02C\xAE\x03\x02\x02\x02E\xB0\x03\x02\x02\x02G\xB2\x03\x02\x02\x02" +
		"I\xB4\x03\x02\x02\x02K\xB7\x03\x02\x02\x02M\xBA\x03\x02\x02\x02O\xBC\x03" +
		"\x02\x02\x02Q\xBF\x03\x02\x02\x02S\xC1\x03\x02\x02\x02U\xC3\x03\x02\x02" +
		"\x02W\xC6\x03\x02\x02\x02YZ\x070\x02\x02Z\x04\x03\x02\x02\x02[\\\x07A" +
		"\x02\x02\\\x06\x03\x02\x02\x02]^\x07,\x02\x02^\b\x03\x02\x02\x02_`\x07" +
		"*\x02\x02`\n\x03\x02\x02\x02ab\x07.\x02\x02b\f\x03\x02\x02\x02cd\x07+" +
		"\x02\x02d\x0E\x03\x02\x02\x02ef\x07>\x02\x02f\x10\x03\x02\x02\x02gh\x07" +
		"@\x02\x02h\x12\x03\x02\x02\x02ij\x07<\x02\x02j\x14\x03\x02\x02\x02kl\x07" +
		"A\x02\x02lm\x07A\x02\x02mn\x07?\x02\x02n\x16\x03\x02\x02\x02op\x07?\x02" +
		"\x02p\x18\x03\x02\x02\x02qr\x07-\x02\x02rs\x07?\x02\x02s\x1A\x03\x02\x02" +
		"\x02tu\x07/\x02\x02uv\x07?\x02\x02v\x1C\x03\x02\x02\x02wx\x07,\x02\x02" +
		"xy\x07?\x02\x02y\x1E\x03\x02\x02\x02z{\x071\x02\x02{|\x07?\x02\x02| \x03" +
		"\x02\x02\x02}~\x07\'\x02\x02~\x7F\x07?\x02\x02\x7F\"\x03\x02\x02\x02\x80" +
		"\x81\x07(\x02\x02\x81\x82\x07?\x02\x02\x82$\x03\x02\x02\x02\x83\x84\x07" +
		"~\x02\x02\x84\x85\x07?\x02\x02\x85&\x03\x02\x02\x02\x86\x87\x07`\x02\x02" +
		"\x87\x88\x07?\x02\x02\x88(\x03\x02\x02\x02\x89\x8A\x07>\x02\x02\x8A\x8B" +
		"\x07>\x02\x02\x8B\x8C\x07?\x02\x02\x8C*\x03\x02\x02\x02\x8D\x8E\x07A\x02" +
		"\x02\x8E\x8F\x07A\x02\x02\x8F,\x03\x02\x02\x02\x90\x91\x07~\x02\x02\x91" +
		".\x03\x02\x02\x02\x92\x93\x07`\x02\x02\x930\x03\x02\x02\x02\x94\x95\x07" +
		"(\x02\x02\x952\x03\x02\x02\x02\x96\x97\x07>\x02\x02\x97\x98\x07?\x02\x02" +
		"\x984\x03\x02\x02\x02\x99\x9A\x07@\x02\x02\x9A\x9B\x07?\x02\x02\x9B6\x03" +
		"\x02\x02\x02\x9C\x9D\x07>\x02\x02\x9D\x9E\x07>\x02\x02\x9E8\x03\x02\x02" +
		"\x02\x9F\xA0\x07-\x02\x02\xA0:\x03\x02\x02\x02\xA1\xA2\x07/\x02\x02\xA2" +
		"<\x03\x02\x02\x02\xA3\xA4\x071\x02\x02\xA4>\x03\x02\x02\x02\xA5\xA6\x07" +
		"\'\x02\x02\xA6@\x03\x02\x02\x02\xA7\xA8\x07u\x02\x02\xA8\xA9\x07y\x02" +
		"\x02\xA9\xAA\x07k\x02\x02\xAA\xAB\x07v\x02\x02\xAB\xAC\x07e\x02\x02\xAC" +
		"\xAD\x07j\x02\x02\xADB\x03\x02\x02\x02\xAE\xAF\x07}\x02\x02\xAFD\x03\x02" +
		"\x02\x02\xB0\xB1\x07\x7F\x02\x02\xB1F\x03\x02\x02\x02\xB2\xB3\x07\x80" +
		"\x02\x02\xB3H\x03\x02\x02\x02\xB4\xB5\x07-\x02\x02\xB5\xB6\x07-\x02\x02" +
		"\xB6J\x03\x02\x02\x02\xB7\xB8\x07/\x02\x02\xB8\xB9\x07/\x02\x02\xB9L\x03" +
		"\x02\x02\x02\xBA\xBB\x07#\x02\x02\xBBN\x03\x02\x02\x02\xBC\xBD\x07/\x02" +
		"\x02\xBD\xBE\x07@\x02\x02\xBEP\x03\x02\x02\x02\xBF\xC0\x07]\x02\x02\xC0" +
		"R\x03\x02\x02\x02\xC1\xC2\x07_\x02\x02\xC2T\x03\x02\x02\x02\xC3\xC4\x07" +
		"<\x02\x02\xC4\xC5\x07<\x02\x02\xC5V\x03\x02\x02\x02\xC6\xC7\x07=\x02\x02" +
		"\xC7X\x03\x02\x02\x02\x03\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CSharpParserLexer.__ATN) {
			CSharpParserLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CSharpParserLexer._serializedATN));
		}

		return CSharpParserLexer.__ATN;
	}

}

